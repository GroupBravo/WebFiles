<html>
<div class="container-fluid">
  <link href="Resources/bootstrap.min.css" rel="stylesheet">
  <script src="Resources/jquery-1.12.2.min.js"></script>
  <script src="Resources/bootstrap.min.js"></script>
  <link href="Resources/Style.css" rel="stylesheet">
https://jsfiddle.net/1a11p3ng/8/#<div class="row">

  <div class="col-xs-12 border" id="main-content">
    <div class="row">
      <div class="col-md-6">
        Width <input id="w-input" type="number" class="form-control">
      </div>
      <div class="col-md-6">
        Height <input id="h-input" type="number" class="form-control">
      </div>
      <div class="col-md-12 text-right" style="padding: 3px;">
        <button id="set-size" class="btn btn-primary">Set</button>
      </div>
    </div>
      canvas
    <div id="canvasHolder">
    <canvas id="canvas">

    </canvas>
  </div>

  </div>

</div>
</div>
<!--
  <script>
   $(document).ready(function(){
   	$("#canvas").outerHeight($(window).height()-$("#canvas").offset().top-Math.abs( $("#canvas").outerHeight(true) - $("#canvas").outerHeight()));
  	$("#h-input").val($("#canvas").outerHeight());
  	$("#w-input").val($("#canvas").outerWidth());
    $("#set-size").click(function(){

    $("#main-content").width($("#w-input").val());
    $("#canvas").outerWidth($("#main-content").width());

    });
   });
  </script>
-->

  <script type="text/javascript" charset="utf-8">
  	var canvas = document.getElementsByTagName('canvas')[0];
    canvas.height=8000, canvas.width=1000;

  	window.onload = function(){
  		var ctx = canvas.getContext('2d');
  		trackTransforms(ctx);
  		function redraw(){
  			// Clear the entire

  			var p1 = ctx.transformedPoint(0,0);
  			var p2 = ctx.transformedPoint(canvas.width,canvas.height);
  			ctx.clearRect(p1.x,p1.y,p2.x-p1.x,p2.y-p1.y);

  			// Alternatively:
  			// ctx.save();
  			// ctx.setTransform(1,0,0,1,0,0);
  			// ctx.clearRect(0,0,canvas.width,canvas.height);
  			// ctx.restore();

        //Outline
        ctx.strokeStyle="#000000"
  			ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(0,0);
  			ctx.lineTo(1000,0);
  			ctx.stroke();

  			ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(0,0);
  			ctx.lineTo(0,2500)
  			ctx.stroke();

  			ctx.beginPath();
  			ctx.lineWidth = 6;
        ctx.moveTo(1000,0)
  			ctx.lineTo(1000,2500);
  			ctx.stroke();

  			ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(1000,2500);
  			ctx.lineTo(0,2500);
  			ctx.stroke();
        //Outline

        ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(0,50);
  			ctx.lineTo(703,50);
  			ctx.stroke();


        ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(700,50);
  			ctx.lineTo(700,200);
  			ctx.stroke();


        ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(703,200);
  			ctx.lineTo(197,200);
  			ctx.stroke();

        ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(200,200);
  			ctx.lineTo(200,350);
  			ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(203,350);
        ctx.lineTo(0,350);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(200,200);
        ctx.lineTo(0,200);
        ctx.stroke();

        ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(200,350);
  			ctx.lineTo(300,300);
  			ctx.stroke();

        ctx.beginPath();
  			ctx.lineWidth = 6;
  			ctx.moveTo(300,300);
  			ctx.lineTo(300,500);
  			ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(303,500);
        ctx.lineTo(0,500);
        ctx.stroke();



        //agnieszka
        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(1000, 50);
        ctx.lineTo(897, 50);
        ctx.stroke();


        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(900, 47);
        ctx.lineTo(900, 200);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(903, 200);
        ctx.lineTo(840, 200);
        ctx.stroke();


        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(840, 197);
        ctx.lineTo(840, 400);
        ctx.stroke();


        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(837, 400);
        ctx.lineTo(1000, 400);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(1000, 500);
        ctx.lineTo(800, 500);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(800, 500);
        ctx.lineTo(800, 800);
        ctx.stroke();


        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(800, 797);
        ctx.lineTo(800, 903);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(800, 900);
        ctx.lineTo(600, 1000);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(1000, 800);
        ctx.lineTo(800, 800);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(1000, 1100);
        ctx.lineTo(600, 1100);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth= 6;
        ctx.moveTo(600, 997);
        ctx.lineTo(600, 1103);
        ctx.stroke();

        //Doors
        ctx.strokeStyle="#ff0000"

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(100,50);
        ctx.lineTo(20,50);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(200,250);
        ctx.lineTo(200,330);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(280,500);
        ctx.lineTo(200,500);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(1000,410);
        ctx.lineTo(1000,490);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(900,100);
        ctx.lineTo(900,180);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(800,600);
        ctx.lineTo(800,680);
        ctx.stroke();

        ctx.beginPath();
        ctx.lineWidth = 6;
        ctx.moveTo(700,950);
        ctx.lineTo(640,980);
        ctx.stroke();
  		}
  		redraw();

  		var lastX=canvas.width/2, lastY=canvas.height/2;
  		var dragStart,dragged;
  		canvas.addEventListener('mousedown',function(evt){
  			document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';
  			lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
  			lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
  			dragStart = ctx.transformedPoint(lastX,lastY);
  			dragged = false;
  		},false);
  		canvas.addEventListener('mousemove',function(evt){
  			lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
  			lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
  			dragged = true;
  			if (dragStart){
  				var pt = ctx.transformedPoint(lastX,lastY);
  				ctx.translate(pt.x-dragStart.x,pt.y-dragStart.y);
  				redraw();
  			}
  		},false);
  		canvas.addEventListener('mouseup',function(evt){
  			dragStart = null;
  			if (!dragged) zoom(evt.shiftKey ? -1 : 1 );
  		},false);

  		var scaleFactor = 1.1;
  		var zoom = function(clicks){
  			var pt = ctx.transformedPoint(lastX,lastY);
  			ctx.translate(pt.x,pt.y);
  			var factor = Math.pow(scaleFactor,clicks*0.3);
  			ctx.scale(factor,factor);
  			ctx.translate(-pt.x,-pt.y);
  			redraw();
  		}

  		var handleScroll = function(evt){
  			var delta = evt.wheelDelta ? evt.wheelDelta/40 : evt.detail ? -evt.detail : 0;
  			if (delta) zoom(delta);
  			return evt.preventDefault() && false;
  		};
  		canvas.addEventListener('DOMMouseScroll',handleScroll,false);
  		canvas.addEventListener('mousewheel',handleScroll,false);
  	};
	// Adds ctx.getTransform() - returns an SVGMatrix
  	// Adds ctx.transformedPoint(x,y) - returns an SVGPoint
  	function trackTransforms(ctx){
  		var svg = document.createElementNS("http://www.w3.org/2000/svg",'svg');
  		var xform = svg.createSVGMatrix();
  		ctx.getTransform = function(){ return xform; };

  		var savedTransforms = [];
  		var save = ctx.save;
  		ctx.save = function(){
  			savedTransforms.push(xform.translate(0,0));
  			return save.call(ctx);
  		};
  		var restore = ctx.restore;
  		ctx.restore = function(){
  			xform = savedTransforms.pop();
  			return restore.call(ctx);
  		};

  		var scale = ctx.scale;
  		ctx.scale = function(sx,sy){
  			xform = xform.scaleNonUniform(sx,sy);
  			return scale.call(ctx,sx,sy);
  		};
  		var rotate = ctx.rotate;
  		ctx.rotate = function(radians){
  			xform = xform.rotate(radians*180/Math.PI);
  			return rotate.call(ctx,radians);
  		};
  		var translate = ctx.translate;
  		ctx.translate = function(dx,dy){
  			xform = xform.translate(dx,dy);
  			return translate.call(ctx,dx,dy);
  		};
  		var transform = ctx.transform
  		ctx.transform = function(a,b,c,d,e,f){
  			var m2 = svg.createSVGMatrix();
  			m2.a=a; m2.b=b; m2.c=c; m2.d=d; m2.e=e; m2.f=f;
  			xform = xform.multiply(m2);
  			return transform.call(ctx,a,b,c,d,e,f);
  		};
  		var setTransform = ctx.setTransform;
  		ctx.setTransform = function(a,b,c,d,e,f){
  			xform.a = a;
  			xform.b = b;
  			xform.c = c;
  			xform.d = d;
  			xform.f = f;
        xform.e = e;
  			return setTransform.call(ctx,a,b,c,d,e,f);
  		};
  		var pt  = svg.createSVGPoint();
  		ctx.transformedPoint = function(x,y){
  			pt.x=x; pt.y=y;
  			return pt.matrixTransform(xform.inverse());
  		}
  	}
  </script>

   </html>
